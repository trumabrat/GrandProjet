// CellNoeud* supprimerCellNoeudsMemeNoeud(CellNoeud* cnd_liste, Noeud* s){
//     if(!cnd_liste || !s) return cnd_liste;
//     CellNoeud* cur = cnd_liste;
//     CellNoeud* prev = NULL;
//     while(cur->nd == s){
//         prev = cur;
//         cur = cur->suiv;
//         free(prev);
//     }
//     while(cur){
//         if(cur->nd == s){
//             prev->suiv = cur->suiv;
//             free(cur);
//             cur = prev->suiv;
//         }else{
//             prev = cur;
//             cur = cur->suiv;
//         }
//     }
//     return cnd_liste;
// }

// CellNoeud* supprimerMemeVoisin(CellNoeud* cnd){
//     if(!cnd) return NULL;
//     CellNoeud* tmp = cnd;
//     CellNoeud* voisin = NULL;
    
//     while(tmp){
//         voisin = tmp->nd->voisins;
//         while(voisin){
//             voisin->suiv = supprimerCellNoeudsMemeNoeud(voisin->suiv, voisin->nd);
//             voisin = voisin->suiv;
//         }
//         tmp = tmp->suiv;
//     }
//     return cnd;
// }


// CellNoeud * insererNoeud(CellNoeud * liste_nd, CellNoeud *insere){
//     CellNoeud * tmp = liste_nd;
//     while(tmp){
//         if(fabs(tmp->nd->x - insere->nd->x) < DOUBLE_PRECISION && fabs(tmp->nd->y - insere->nd->y) < DOUBLE_PRECISION){
//             printf("deja dans la liste\n");
//             return liste_nd;
//         }
//         tmp = tmp->suiv;
//     }
//     insere->suiv = liste_nd;
//     liste_nd = insere;
//     printf("element est insere\n");
//     return liste_nd; 
// }

// CellNoeud* ajouterVoisin(CellNoeud* prevC, Noeud* next){
//     if(!next || !prevC) return NULL;
//     assert(prevC->nd);
//     CellNoeud* tmp = prevC->nd->voisins;
//     while(tmp){
//         if(tmp->nd == next){
//             return tmp;
//         }
//         tmp = tmp->suiv;
//     }
//     CellNoeud* cellN = (CellNoeud*) calloc(1, sizeof(CellNoeud));
//     cellN->nd = next;

//     cellN->suiv = prevC->nd->voisins;
//     prevC->nd->voisins = cellN;

//     prevC->suiv = next->voisins;
//     next->voisins = prevC;

//     return cellN;
// }

// Noeud* rechercheCreeNoeudHachage(Reseau *R, TableHachage* H, double x, double y){
//     // recherche du noeud
//     Noeud* nd = rechercheHachageNoeud(H, x, y);
//     // si dans la table
//     if(nd) return nd;

//     // sinon creation d'un nouveau noeud et ajout dans la table de hachage
//     Noeud* newNoeud = creerNoeud(++R->nbNoeuds, x, y);

//     int indiceCase = fonctionHachage(fonctionCle(x, y), H->taille);
//     H->tableHachageNoeud[indiceCase] = creerCellNoeud(newNoeud, H->tableHachageNoeud[indiceCase]);

//     // ajout dans le reseau
//     R->noeuds = creerCellNoeud(newNoeud, R->noeuds);
//     return newNoeud;
// }

// // version recursive pour creer Chaines a partir d'un fichier
// Chaines* lectureChaines2(FILE* f){
//     int nbChaine, gamma;

//     // recuperer le nombre de chaines
//     fscanf(f, " %*s %d", &nbChaine);
//     if(nbChaine == 0){
//         printf("Erreur : nbChaine = 0 dans le fichier.");
//         return NULL;
//     }

//     // recuperer la valeur de gamma
//     fscanf(f, " %*s %d", &gamma);
    
//     //creer une instance de Chaines
//     Chaines* res = (Chaines*) calloc(1, sizeof(Chaines));
//     res->nbChaines = nbChaine;
//     res->gamma = gamma;
    
//     // creer les CellChaine
//     res->chaines = creerCellChaineRec(nbChaine, f);

//     return res;
// }

// liberer Chaines d'une maniere recursive
void libererChaines(Chaines* chaines){
    libererCellChaineRec(chaines->chaines);
    free(chaines);
}

// creer CellPoint d'une maniere recursive
CellPoint* creerCellPointRec(int nb, FILE* f){
    if(nb == 0) return NULL;
    CellPoint* unPoint = (CellPoint*) malloc(sizeof(CellPoint));
    fscanf(f, " %lf %lf", &(unPoint->x), &(unPoint->y));
    unPoint->suiv = creerCellPointRec(nb-1, f);
    return unPoint;
}


// liberer CellPoint d'une maniere recursive
void libererCellPointRec(CellPoint* p){
    if(!p) return;
    libererCellPointRec(p->suiv);
    free(p);
}

// creer CellChaine d'une maniere recursive
CellChaine* creerCellChaineRec(int nb, FILE* f){
    if(nb == 0) return NULL;
    CellChaine* res = (CellChaine*) calloc(1, sizeof(CellChaine));
    int nbPoints;
    if(fscanf(f, " %d %d", &(res->numero), &nbPoints) == 2){
        res->points = creerCellPointRec(nbPoints, f);
        res->suiv = creerCellChaineRec(nb-1, f);
    }
    return res;
}

// liberer CellChaine d'une maniere recursive
void libererCellChaineRec(CellChaine* ch){
    if(!ch) return;
    libererCellChaineRec(ch->suiv);
    libererCellPointRec(ch->points);
    free(ch);
}

Noeud* rechercheHachageNoeud(TableHachage* H, double x, double y){
    int indiceCase = fonctionHachage(fonctionCle(x, y), H->taille);
    CellNoeud* tmp = H->tableHachageNoeud[indiceCase];
    Noeud* nd = NULL;
    while(tmp){
        nd = tmp->nd;
        assert(nd); // pour securiser
        if(fabs(nd->x - x) < DOUBLE_PRECISION && fabs(nd->y - y) < DOUBLE_PRECISION){
            return nd;
        }
        tmp = tmp->suiv;
    }
    return NULL;
}

TableHachage* enregistrerHachage(TableHachage* H, Noeud* n){
    int indiceCase = fonctionHachage(fonctionCle(n->x, n->y), H->taille);
    CellNoeud* tmp = H->tableHachageNoeud[indiceCase];
    CellNoeud* newCN = creerCellNoeud(n, tmp);
    H->tableHachageNoeud[indiceCase] = newCN;
    return H;
}